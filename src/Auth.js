import auth0 from "auth0-js";
import history from "./history";
import { AUTH_CONFIG } from "./auth0-variables";

class Auth {
  // Here, you create an instance of auth0.WebAuth with your Auth0 values
  // and define some other important configurations. For example, you are
  // defining that Auth0 will redirect users (redirectUri) to the
  // http://localhost:3000/callback URL (the same one you inserted in the
  // Allowed Callback URLs field previously).
  constructor() {
    this.auth0 = new auth0.WebAuth({
      domain: AUTH_CONFIG.domain,
      clientID: AUTH_CONFIG.clientID,
      audience: "http://localhost:8080/api/private",
      redirectUri: "http://localhost:3000/callback",
      responseType: "token id_token",
      scope: "openid"
    });
    // this.getProfile = this.getProfile.bind(this);
    this.getIdToken = this.getIdToken.bind(this);
    this.getAccessToken = this.getAccessToken.bind(this);

    // this.handleAuthentication = this.handleAuthentication.bind(this);
    // this.isAuthenticated = this.isAuthenticated.bind(this);
    // this.signIn = this.signIn.bind(this);
    // this.signOut = this.signOut.bind(this);

    this.login = this.login.bind(this);
    this.logout = this.logout.bind(this);
    this.handleAuthentication = this.handleAuthentication.bind(this);
    this.isAuthenticated = this.isAuthenticated.bind(this);
  }
  //This method returns the profile of the authenticated user, if any.
  // getProfile() {
  // 	return this.profile;
  // }

  // This method returns the idToken generated by Auth0 for the current user.
  // This is what you will use while issuing requests to your POST endpoints.
  getIdToken() {
    console.log(localStorage.getItem("id_token"));
    return localStorage.getItem("id_token");
  }

  getAccessToken() {
    console.log(localStorage.getItem("access_token"));
    return localStorage.getItem("access_token");
  }

  //This method returns whether there is an authenticated user or not.
  // isAuthenticated() {
  // 	return new Date().getTime() < this.expiresAt;
  // }
  isAuthenticated() {
    // Check whether the current time is past the
    // Access Token's expiry time
    let expiresAt = JSON.parse(localStorage.getItem("expires_at"));
    return new Date().getTime() < expiresAt;
  }

  //This method initializes the authentication process. In other words,
  //this method sends your users to the Auth0 login page.
  // signIn() {
  // 	this.auth0.authorize();
  // }
  login() {
    this.auth0.authorize();
  }

  //This is the method that your app will call right after the user is redirected
  //from Auth0. This method simply reads the hash segment of the URL to fetch the
  //user details and the id token.
  handleAuthentication() {
    return new Promise((resolve, reject) => {
      this.auth0.parseHash((err, authResult) => {
        if (err) return reject(err);
        if (!authResult || !authResult.idToken) {
          return reject(err);
        }
        this.setSession(authResult);
        resolve();
      });
    });
  }

  // handleAuthentication() {
  // 	this.auth0.parseHash((err, authResult) => {
  // 		if (authResult && authResult.accessToken && authResult.idToken) {
  // 			this.setSession(authResult);
  // 			history.replace("/home");
  // 		} else if (err) {
  // 			history.replace("/home");
  // 			console.log(err);
  // 		}
  // 	});
  // }

  setSession(authResult) {
    // Set the time that the Access Token will expire at
    let expiresAt = JSON.stringify(
      authResult.expiresIn * 1000 + new Date().getTime()
    );
    localStorage.setItem("access_token", authResult.accessToken);
    localStorage.setItem("id_token", authResult.idToken);
    localStorage.setItem("expires_at", expiresAt);
    // navigate to the home route
    history.replace("/home");
  }

  //This method signs a user out by setting the profile, id_token, and expiresAt to null.
  // signOut() {
  // 	// clear id token, profile, and expiration
  // 	this.idToken = null;
  // 	this.profile = null;
  // 	this.expiresAt = null;
  // }
  logout() {
    // Clear Access Token and ID Token from local storage
    localStorage.removeItem("access_token");
    localStorage.removeItem("id_token");
    localStorage.removeItem("expires_at");
    // navigate to the home route
    history.replace("/home");
    //https://vehicle-history.auth0.com/v2/logout
  }
}

const auth0Client = new Auth();

export default auth0Client;
